# 3b: Sampling the Imaginary

```{r}
#| label: setup

library(tidyverse)
library(tidybayes)
```

**Medical Test Scenario with Bayes theorem**

If you would like to know the probability someone is a vampire given
they test positive to the blood-based vampire test, you compute

$$
Pr(vampire|positive) = \frac{Pr(positive|vampire) \times Pr(vampire)} {Pr(positive)}
$$ This is Bayes theorem.

```{r}
#| label: scenario-bayes-theorem-b

tibble(pr_positive_vampire_b = .95,
       pr_positive_mortal_b  = .01,
       pr_vampire_b          = .001) %>% 
  mutate(pr_positive_b = pr_positive_vampire_b * pr_vampire_b + pr_positive_mortal_b * (1 - pr_vampire_b)) %>% 
  mutate(pr_vampire_positive_b = pr_positive_vampire_b * pr_vampire_b / pr_positive_b) %>% 
  glimpse()
```

**Medical test scenario with natural frequencies**

```{r}
#| label: scenario-natural-frequencies

tibble(pr_vampire_b2          = 100 / 100000,
       pr_positive_vampire_b2 = 95 / 100,
       pr_positive_mortal_b2  = 999 / 99900) %>% 
  mutate(pr_positive_b2 = 95 + 999) %>% 
  mutate(pr_vampire_positive_b2 = pr_positive_vampire_b2 * 100 / pr_positive_b2) %>% 
  glimpse()

```

## 3.1b Sampling from Grid

```{r}
#| label: sampling-grid-b

# how many grid points would you like?
n <- 1000
n_success <- 6
n_trials  <- 9

(
  d <-
  tibble(p_grid_b = seq(from = 0, to = 1, length.out = n),
         # note we're still using a flat uniform prior
         prior  = 1) %>% 
  mutate(likelihood = dbinom(n_success, size = n_trials, prob = p_grid_b)) %>% 
  mutate(posterior_b = (likelihood * prior) / sum(likelihood * prior))
)

```

We've renamed McElreath's `prob_p` and `prob_data` as `prior` and
`likelihood`, respectively. Now we'll use the `dplyr::slice_sample()`
function to sample rows from `d`, saving them as `samples_b`.

```{r}
#| label: sample-grid-b2

# how many samples would you like?
n_samples <- 1e4

# make it reproducible
set.seed(3)

samples_b <-
  d %>% 
  slice_sample(n = n_samples, weight_by = posterior_b, replace = T)

# to see the difference between grid and samples 
# I will change all names for the samples_b data frame
samples_b <- samples_b |> 
    rename(p_grid_b_sample = p_grid_b,
           prior_sample = prior,
           posterior_b_sample = posterior_b,
           likelihood_sample = likelihood)

glimpse(samples_b)
```

With the `str()` function you will get a result with shorter figures
that is better adapted to a small screen.

```{r}
#| label: sample-grid-b2-str

str(samples_b)
```

Now we can plot the left panel of Figure 3.1 with `geom_point()`. But
before we do, we'll need to add a variable numbering the samples.

```{r}
#| label: plot-points

samples_b %>% 
  mutate(sample_number = 1:n()) %>% 
  
  ggplot(aes(x = sample_number, y = p_grid_b_sample)) +
  geom_point(alpha = 1/10) +
  scale_y_continuous("proportion of water (p)", limits = c(0, 1)) +
  xlab("sample number")

```

We'll make the density in the right panel with `geom_density()`.

```{r}
#| label: plot-density

samples_b %>% 
  ggplot(aes(x = p_grid_b_sample)) +
  geom_density(fill = "grey") +
  scale_x_continuous("proportion of water (p)", limits = c(0, 1))

```

If we keep increasing the number of samples we will get a better
approximation to the ideal posterior distribution we have computed via
grid approximation.. Here's what it looks like with `1e6`.

```{r}
#| label: plot-density2

set.seed(3)

d %>% 
  slice_sample(n = 1e6, weight_by = posterior_b, replace = T) %>% 
  ggplot(aes(x = p_grid_b)) +
  geom_density(fill = "grey") +
  scale_x_continuous("proportion of water (p)", limits = c(0, 1))

```

## 3.2b Sampling to Summarize

### 3.2.1b Intervals of Defined Boundaries

```{r}

#| label: grid-boundaries-b

# add up posterior probability where p < 0.5
d |> filter(p_grid_b < 0.5) |> 
    summarize(sum = sum(posterior_b))

```

If what you want is a frequency based on filtering by `samples`, then
you might use `n()` within `summarise()`.

```{r}
#| label: grid-boundaries-b2

# add up all posterior probabilities of samples under .5
samples_b |> 
    filter(p_grid_b_sample < .5) |> 
    summarize(sum = n() / n_samples)
```

A more explicit approach for the same computation is to follow up
`count()` with `mutate()`.

```{r}
#| label: grid-boundaries-b3

samples_b |> 
    count(p_grid_b_sample < .5) |> 
    mutate(probability = n / sum(n))

```

An even trickier approach for the same is to insert the logical
statement `p_grid < .5` within the `mean()` function.

```{r}
#| label: grid-boundaries-b4

samples_b |> 
    summarize(sum = mean(p_grid_b_sample < .5))

```

To determine the posterior probability between 0.5 and 0.75, you can use
`&` within `filter()`.

```{r}
#| label: grid-boundaries-b5

samples_b |> 
    filter(p_grid_b_sample > .5 & p_grid_b_sample < .75) |> 
    summarize(sum = n() / n_samples)

```

```{r}
#| label: figure-3-2-upper-part

# upper left panel
p1 <-
  d %>% 
  ggplot(aes(x = p_grid_b, y = posterior_b)) +
  geom_line() +
  geom_area(data = d %>% filter(p_grid_b < .5), fill = "blue") +
  labs(x = "proportion of water (p)",
       y = "density")

# upper right panel
p2 <- 
  d %>% 
  ggplot(aes(x = p_grid_b, y = posterior_b)) +
  geom_line() +
  geom_area(data = d %>% filter(p_grid_b > .5 & p_grid_b < .75), fill = "blue") +
  labs(x = "proportion of water (p)",
       y = "density")

library(patchwork)
p1 + p2
```

### 3.2.2b Interval of Defined Mass

Since we saved our `p_grid_b_sample` samples within the well-named
`samples` tibble, we'll have to index with `$` within `quantile`.

```{r}
#| label: sample-quantile-b

(q80 <- quantile(samples_b$p_grid_b_sample, probs = .8))

```

For an alternative approach, we could `select()` the `samples` vector,
extract it from the tibble with `pull()`, and then pump it into
`quantile()`.

> `pull()` is similar to `$`. It's mostly useful because it looks a
> little nicer in pipes, it also works with remote data frames, and it
> can optionally name the output.

```{r}
#| label: sample-quantile-b2

samples_b |> 
    pull(p_grid_b_sample) |> 
    quantile(probs = .8)
    

```

We might also use `quantile()` within `summarise()`.

```{r}
#| label: sample-quantile-b3

samples_b |> 
    summarize(q80_2 = quantile(p_grid_b_sample, probs = .8))

```

```{r}
#| label: sample-quantile-b4

samples_b |> 
    summarize(q10 = quantile(p_grid_b_sample, probs = .1),
               q90 = quantile(p_grid_b_sample, probs = .9))
    

```

Returning not a data frame but just a vector

```{r}
#| label: sample-quantile-b5

(q10_q90 = quantile(samples_b$p_grid_b_sample, probs = c(.1, .9)))

```

```{r}
#| label: sample-quantile-b6

samples_b |> 
    summarize(q10_90 = quantile(p_grid_b_sample, probs = c(.1, .9)))

```

> ```         
> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in dplyr 1.1.0.
> Please use `reframe()` instead.
> When switching from `summarise()` to `reframe()`, remember that `reframe()` always returns an ungrouped data frame and adjust accordingly.
> ```

```{r}
#| label: sample-quantile-b7

samples_b |> 
    reframe(q10_90 = quantile(p_grid_b_sample, probs = c(.1, .9)))

```

Now we have our cutoff values saved as `q80`, respectively `q10` and
`q90`, we're ready to make the bottom panels of Figure 3.2.

```{r}
#| label: figure-3-2-lower-part

p1 <-
  d %>% 
  ggplot(aes(x = p_grid_b, y = posterior_b)) +
  geom_line() +
  geom_area(data = d %>% filter(p_grid_b < q80), fill = "blue") +
  annotate(geom = "text",
           x = .25, y = .0025,
           label = "lower 80%") +
  labs(x = "proportion of water (p)",
       y = "density")

# upper right panel
p2 <- 
  d %>% 
  ggplot(aes(x = p_grid_b, y = posterior_b)) +
  geom_line() +
  geom_area(data = d %>% filter(p_grid_b > q10_q90[[1]] & p_grid_b < q10_q90[[2]]), fill = "blue") +
  annotate(geom = "text",
           x = .25, y = .0025,
           label = "middle 80%") +
  labs(x = "proportion of water (p)",
       y = "density")

library(patchwork)
p1 + p2

```

**Percentile Intervals** (PI) do a good job of communicating the shape
of a distribution, *as long as the distribution isn't too asymmetrical*.
But in terms of describing the shape of the posterior
distribution---which is really all these intervals are asked to do---the
percentile interval can be misleading.

The following skewed distribution demonstrates the misleading character
of PIs:

We've already defined `p_grid_b` and `prior` within `d`, above. Here
we'll reuse them and create a new tibble by updating all the columns
with the skewed parameters.

```{r}
#| label: pi-skewed-b

# here we update the `dbinom()` parameters
n_success_skewed <- 3
n_trials_skewed  <- 3


# update `d` to d_skewed
d_skewed <-
  d %>% 
  mutate(likelihood_b_skewed = dbinom(n_success_skewed, size = n_trials_skewed, prob = p_grid_b)) %>% 
  mutate(posterior_b_skewed  = (likelihood_b_skewed * prior) / sum(likelihood_b_skewed * prior))

# make the next part reproducible
set.seed(3)

# here's our new samples tibble
(
    d_skewed <- 
        d_skewed %>% 
        slice_sample(n = 9000, weight_by = posterior_b_skewed, replace = T) |> 
        rename(p_grid_b_skewed = p_grid_b)
)

```

**************************** CHANGED resp. DELETED ***************

```{r}
#| label: hdi-normal

library(tidybayes)
mode_hdi(samples_b$p_grid_b_sample, .width = .5)
qi(samples_b$p_grid_b_sample, .width = .5)
hdi(samples_b$p_grid_b_sample, .width = .5)


```

```{r}
#| label: hdi-skewed

# # can't reproduce
# # Error in quantile.default(dist_y, probs = 1 - .width) :
# # missing values and NaN's not allowed if 'na.rm' is FALSE
# # it works with n = 9400 but not with n >= 9500.

library(tidybayes) 
mode_hdi(d_skewed$p_grid_b_skewed, .width = .5)
qi(d_skewed$p_grid_b_skewed, .width = .5)
# mode_hdi and hdi is not correct
# hdi results in two lines instead as one line
# hdi first value is far too low
hdi(d_skewed$p_grid_b_skewed, .width = .5)
rethinking::HPDI(d_skewed$p_grid_b_skewed, prob = .5)

```

************** END of CHANGED resp. DELETED **********************



```{r}
#| label: figure-3-3

# left panel
p1 <-
  d_skewed %>% 
  ggplot(aes(x = p_grid_b_skewed, y = posterior_b_skewed)) +
  # check out our sweet `qi()` indexing
  geom_area(data = d_skewed %>% 
              filter(p_grid_b_skewed > tidybayes::qi(d_skewed$p_grid_b_skewed, .width = .5)[1] & 
                       p_grid_b_skewed < tidybayes::qi(d_skewed$p_grid_b_skewed, .width = .5)[2]),
            fill = "blue") +
  geom_line() +
  labs(subtitle = "50% Percentile Interval",
       x = "proportion of water (p)",
       y = "density")
p1

# right panel
p2 <-
  d_skewed %>% 
  ggplot(aes(x = p_grid_b_skewed, y = posterior_b_skewed)) +
  geom_area(data = d_skewed %>% 
              filter(p_grid_b_skewed > rethinking::HPDI(d_skewed$p_grid_b_skewed, prob = .5)[1] & 
                       p_grid_b_skewed < rethinking::HPDI(d_skewed$p_grid_b_skewed, prob = .5)[2]),
            fill = "blue") +
  geom_line() +
  labs(subtitle = "50% HPDI",
       x = "proportion of water (p)",
       y = "density")
p2

# combine!
p1 | p2

```

Because of my problems with the calculation of the HPDI I am going to
skip the rest of this part of the chapter. This is not very problematic
for two reasons:

1.  PI and HPDI are only very different if the distribution is very
    skewed.
2.  Kurz will primarily stick to the PI-based intervals.

### 3.2.3b Point Estimates

```{r}
#| label: update-d-tbl


# here we update the `dbinom()` parameters
n_success <- 3
n_trials  <- 3
n_samples <- 1e4

# update `d`
d_update <-
  d %>% 
  mutate(likelihood = dbinom(n_success, size = n_trials, prob = p_grid_b)) %>% 
  mutate(posterior_b  = (likelihood * prior) / sum(likelihood * prior))

# make the next part reproducible
set.seed(3)

# here's our new samples tibble
(
  samples_update <-
    d_update %>% 
    slice_sample(n = n_samples, weight_by = posterior_b, replace = T)
)
```

> We've been calling point estimates measures of central tendency. If we
> `arrange()` our `d` tibble in descending order by `posterior`, we'll
> see the corresponding `p_grid` value for its MAP estimate.

```{r}
#| label: map-estimate-b1
d_update %>% 
  arrange(desc(posterior_b))
```

```{r}
#| label: map-estimate-b2
d_update |>  
  arrange(desc(posterior_b)) |> 
    slice(1)
```

```{r}
#| label: hdi-not-working
#| eval: false

# hdi-from-tidybases not working
# it will generate the following error message:
# Error in quantile.default(dist_y, probs = 1 - .width) :
# missing values and NaN's not allowed if 'na.rm' is FALSE
samples_update %>% mode_hdi(p_grid_b)
```

```{r}
#| label: mode-mean-median

# using tidybayes (but not documented!)
tidybayes::Mode(samples_update$p_grid_b)

samples_update %>% 
  summarise(mode   = Mode(samples_update$p_grid_b),
            mean  = mean(p_grid_b),
            median = median(p_grid_b))
```


## Addition from old file



```{r}
#| label: hdi-normal2

library(tidybayes)
mode_hdi(samples_b$p_grid_samples_b, .width = .5)
qi(samples_b$p_grid_samples_b, .width = .5)
hdi(samples_b$p_grid_samples_b, .width = .5)


```

```{r}
#| label: hdi-skewed2

# # can't reproduce
# # Error in quantile.default(dist_y, probs = 1 - .width) :
# # missing values and NaN's not allowed if 'na.rm' is FALSE
# # it works with n = 9400 but not with n >= 9500.

library(tidybayes) 
mode_hdi(d_skewed_b$p_grid_skewed_b, .width = .5)
qi(d_skewed_b$p_grid_skewed_b, .width = .5)
# mode_hdi and hdi is not correct
# hdi results in two lines instead as one line
# hdi first value is far too low
hdi(d_skewed_b$p_grid_skewed_b, .width = .5)
rethinking::HPDI(d_skewed_b$p_grid_skewed_b, prob = .5)

```

