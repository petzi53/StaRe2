{
  "hash": "956981cb94e06889a87d2434880e79e3",
  "result": {
    "markdown": "# Comments about using Quarto\n\nHere I will collect some notes about using Quarto. At the moment it is\njust an unordered and unedited collection of all my notes scattered in\nthe chapters. These notes divert the attention from my main goal to\nlearn and understand Bayesian statistics.\n\n## Table excursion\n\n::: {.callout-note style=\"color: blue\"}\n###### Table Packages Used\n\nKurz employed the {**flextable**} package to print tables. As I have no\nexperience with this package, I will apply {**kableExtra**} in this\ndocument.\\\n\\\nUntil now I had used most of the time kableExtra and sometimes DT. For a\nshort compilation of available table packages see the section on [Other\npackages for creating\ntables](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html)\nin the R Markdown Cookbook. The following excursion on tables follows\nthe blog article [Top 7 Packages for Making Beautiful Tables in\nR](https://towardsdatascience.com/top-7-packages-for-making-beautiful-tables-in-r-7683d054e541)\nby Devashree Madhugiri.\n:::\n\n------------------------------------------------------------------------\n\n-   [{**gt**}](https://gt.rstudio.com/): The gt package offers a\n    different and easy-to-use set of functions that helps us build\n    display tables from tabular data. The gt philosophy states that a\n    comprehensive collection of table parts can be used to create a\n    broad range of functional tables. These are the table body, the\n    table footer, the spanner column labels, the column labels, and the\n    table header. (I should look into the {**gt**} package in more\n    detail as it is developed by the RStudio/Posit team, that stands not\n    only for high quality but also for tidyverse compatibility.)\n\n    ![](https://gt.rstudio.com/reference/figures/gt_parts_of_a_table.svg)\n\n-   [{**formattable**}](https://renkun-ken.github.io/formattable/):\n    Formattable data frames are data frames that will be displayed in\n    HTML tables using formatter functions. This package includes\n    techniques to produce data structures with predefined formatting\n    rules, such that the objects maintain the original data but are\n    formatted. The package consists of several standard formattable\n    objects, including percent, comma, currency, accounting, and\n    scientific.\n\n-   [{**kableExtra**}](https://haozhu233.github.io/kableExtra/): It\n    extends the basic functionality of `knitr::kable()` tables. Although\n    `knitr::kable()` is simple by design, it has many features missing\n    which are usually available in other packages. {**kableExtra**} has\n    filled the gap nicely. One of the best thing about {**kableExtra**}\n    is that most of its table capabilities work for both HTML and PDF\n    formats.\n\n-   [{**DT**}](https://rstudio.github.io/DT/): dt is an abbreviation of\n    'DataTables.' Data objects in R can be rendered as HTML tables using\n    the JavaScript library 'DataTables' (typically via R Markdown or\n    Shiny).\n\n-   [{**flextable**}](https://davidgohel.github.io/flextable/): This\n    package helps you to create reporting table from a data frame\n    easily. You can merge cells, add headers, add footers, change\n    formatting, and set how data in cells is displayed. Table content\n    can also contain mixed types of text and image content. Tables can\n    be embedded from R Markdown documents into HTML, PDF, Word, and\n    PowerPoint documents and can be embedded using Package Officer for\n    Microsoft Word or PowerPoint documents. Tables can also be exported\n    as R plots or graphic files, e.g., png, pdf, and jpeg.\n\n-   [{**reactable**}](https://glin.github.io/reactable/): `reactable()`\n    creates a data table from tabular data with sorting and pagination\n    by default. The data table is an HTML widget that can be used in R\n    Markdown documents and Shiny applications or viewed from an R\n    console. It is based on the React Table library and made with\n    reactR. Features are:\n\n    -   It creates a data table with sorting, filtering, and pagination\n    -   It has built-in column formatting\n    -   It supports custom rendering via R or JavaScript\n    -   It works seamlessly within R Markdown documents and the Shiny\n        app\n\n-   [{**ractablefmtr**}](https://kcuilla.github.io/reactablefmtr/index.html):\n    The package improves the appearance and formatting of tables created\n    using the reactable R library. It includes many conditional\n    formatters that are highly customizable and easy to use.\n\nI sure there are other packages as well. But the above seven packages\nare a first starting point to learn creating and displaying\nsophisticated data tables in R.\n\n> The authors of R Markdown Cookbook (Yihui Xie, Christophe Dervieux,\n> Emily Riederer) mention also several other table packages in the\n> section [Other packages for creating\n> tables](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html):\n>\n> -   **rhandsontable** ([Owen\n>     2021](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-rhandsontable)):\n>     Also similar to **DT**, and has an Excel feel (e.g., you can edit\n>     data directly in the table). Visit\n>     <https://jrowen.github.io/rhandsontable/> to learn more about it.\n>\n> -   **pixiedust** ([Nutter\n>     2021](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-pixiedust)):\n>     Features creating tables for models (such as linear models)\n>     converted through the **broom** package ([Robinson, Hayes, and\n>     Couch\n>     2023](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-broom)).\n>     It supports Markdown, HTML, and LaTeX output formats. Its\n>     repository is at <https://github.com/nutterb/pixiedust>.\n>\n> -   **stargazer** ([Hlavac\n>     2022](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-stargazer)):\n>     Features formatting regression models and summary statistics\n>     tables. The package is available on CRAN at\n>     <https://cran.r-project.org/package=stargazer>.\n>\n> -   **xtable** ([Dahl et al.\n>     2019](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-xtable)):\n>     Perhaps the oldest package for creating tables---the first release\n>     was made in 2000. It supports both LaTeX and HTML formats. The\n>     package is available on CRAN at\n>     <https://cran.r-project.org/package=xtable>.\n>\n> I'm not going to introduce the rest of packages, but will just list\n> them here: **tables** ([Murdoch\n> 2023](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-tables)),\n> **pander** ([DarÃ³czi and Tsegelskyi\n> 2022](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-pander)),\n> **tangram** ([S. Garbett\n> 2023](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-tangram)),\n> **ztable** ([Moon\n> 2021](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-ztable)),\n> and **condformat** ([Oller Moreno\n> 2022](https://bookdown.org/yihui/rmarkdown-cookbook/table-other.html#ref-R-condformat)).\n\n------------------------------------------------------------------------\n\n::: callout-warning\n###### Quarto cannot list & execute code in the same chunk\n\n2023-05-08: `lst-label` and `lst-cap` are only working in display code\nsnippets but not in snippets to execute. See [lst-cap and lst-label in\nQuarto?](https://community.rstudio.com/t/lst-cap-and-lst-label-in-quarto/157173)\nand [lst-label and lst-cap do not produce listing caption and\nreference](https://github.com/quarto-dev/quarto-cli/issues/1580).\n:::\n\n2023-07-23: In the meanwhile I found a work around:\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-replicate-sim2 lst-cap=\"R code snippet 2.4: Replicate simulation\"}\n#### USE ANOTHER EXAMPLE WITHOUT REFERENCE TO ANOTHER FUNCTION\n\nreplicate(sim_globe(p = 0.5, N = 9), n = 10) \n```\n:::\n\n\n------------------------------------------------------------------------\n\n::: callout-warning\n###### `precis()` results not printed correctly from visual mode\n\nThe result of `rethinking::precis()` does not display correctly after\nthe chunk in RStudio visual mode. But it works in source mode and it\ndisplayed correctly immediately after the chunk.\n\nThe columns of the table are too narrow so that you can't see the header\nand inspect the values. Printing to the console or to the web is\ncorrect.\n\nA workaround is wrapping the result with `print()` or to render the\ndocument in source mode. See my [bug\nreport](https://github.com/rstudio/rstudio/issues/13227).\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}